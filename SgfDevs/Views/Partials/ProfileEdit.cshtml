@inherits Umbraco.Web.Mvc.UmbracoViewPage
@using System.Web.Mvc.Html
@using ClientDependency.Core.Mvc
@using Umbraco.Web
@using Umbraco.Web.Controllers

@{
    var profileModel = Members.GetCurrentMemberProfileModel();

    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
    Html.RequiresJs("https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.0/jquery.validate.min.js");
    Html.RequiresJs("https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.11/jquery.validate.unobtrusive.min.js");

    var success = TempData["ProfileUpdateSuccess"] != null;
}

@if (Members.IsLoggedIn() && profileModel != null)
{
    if (success)
    {
        @* This message will show if profileModel.RedirectUrl is not defined (default) *@
        <p>Profile updated</p>
    }

    using (Html.BeginUmbracoForm<UmbProfileController>("HandleUpdateProfile"))
    {
        @Html.ValidationSummary("profileModel", true)

        @Html.HiddenFor(m => profileModel.Name)

        @*<div class="field">
                @Html.LabelFor(m => profileModel.Name)
                @Html.TextBoxFor(m => profileModel.Name)
                @Html.ValidationMessageFor(m => profileModel.Name)
            </div>*@

        <div class="field">
            @Html.LabelFor(m => profileModel.Email)
            @Html.TextBoxFor(m => profileModel.Email)
            @Html.ValidationMessageFor(m => profileModel.Email)
        </div>

        for (var i = 0; i < profileModel.MemberProperties.Count; i++)
        {
            @*
                By default this will render a textbox but if you want to change the editor template for this property you can
                easily change it. For example, if you wanted to render a custom editor for this field called "MyEditor" you would
                create a file at ~/Views/Shared/EditorTemplates/MyEditor.cshtml", then you will change the next line of code to
                render your specific editor template like:
                @Html.EditorFor(m => profileModel.MemberProperties[i].Value, "MyEditor")
            *@

            @*Ignoring these fields for now. Will take some more work to wire up*@
            if (profileModel.MemberProperties[i].Alias == "company")
            {
            }

            else if (profileModel.MemberProperties[i].Alias == "aboutText")
            {
                <div class="field">
                    @Html.LabelFor(m => profileModel.MemberProperties[i].Value, profileModel.MemberProperties[i].Name)
                    @Html.EditorFor(m => profileModel.MemberProperties[i].Value, "TextArea")
                </div>
            }

            else if (profileModel.MemberProperties[i].Alias == "groups")
            {
                @Html.EditorFor(m => profileModel.MemberProperties[i].Value, "Groups")
            }

            else if (profileModel.MemberProperties[i].Alias == "skillsTags")
            {
                @Html.EditorFor(m => profileModel.MemberProperties[i].Value, "Skills")
            }

            else if (profileModel.MemberProperties[i].Alias == "availableForHire" || profileModel.MemberProperties[i].Alias == "availableForContractWork")
            {
                <div class="field">
                    @Html.LabelFor(m => profileModel.MemberProperties[i].Value, profileModel.MemberProperties[i].Name)
                    @Html.EditorFor(m => profileModel.MemberProperties[i].Value, "Toggle")
                </div>
            }

            else if (profileModel.MemberProperties[i].Alias == "profileImage")
            {
                @Html.EditorFor(m => profileModel.MemberProperties[i].Value, "Upload")
            }

            else
            {
                <div class="field">
                    @Html.LabelFor(m => profileModel.MemberProperties[i].Value, profileModel.MemberProperties[i].Name)
                    @Html.EditorFor(m => profileModel.MemberProperties[i].Value)
                </div>
            }


            @Html.HiddenFor(m => profileModel.MemberProperties[i].Alias)
        }

        <footer>
            <button class="button tall wide" type="submit">Save</button>
        </footer>
    }
}